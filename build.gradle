plugins {
    id "de.undercouch.download" version "5.5.0"
    id 'java'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    shade
    compile.extendsFrom shade
}

sourceSets.main.resources {
    exclude '**/pixelcrasher.yml'
}

group = 'de.pixelcrasher'
version = '1.0-SNAPSHOT'

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

repositories {
    mavenLocal()
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://pixelgames.me/reposilite/releases' }
    maven { url = 'https://pixelgames.me/reposilite/snapshots' }
    maven { url = 'https://libraries.minecraft.net/'}
    mavenCentral()
    gradlePluginPortal()
}

compileJava.options.encoding = 'UTF-8'
var assetsFolder = file('run/assets')

ext {
    minecraft_version = '1.20.1'
    mcp_version = '20230612.114412'
    mappings_channel = 'official'
    mappings_version = '1.20.1'
    spi_version = '7.0.0'
}

tasks.register('printSourceSetInformation') {
    sourceSets.each { src ->
        println "[" + src.name + "]"
        println "--> Source directories: " + src.allJava.srcDirs
        println "--> Output directories: " + src.output.classesDirs.files
        println "--> Compile classpath:"
        src.compileClasspath.files.each {
            println "  " + it.path
        }
        println "--> Runtime classpath:"
        src.runtimeClasspath.files.each {
            println "  " + it.path
        }
        println ""
    }
}

tasks.register('downloadAssets', Download) {
    src 'https://pixelgames.me/pixelcrasher/1.20.1/assets-1.20.1.zip'
    dest 'cache/assets.zip'
    overwrite false
}

tasks.register('copyAssets') {
    group = "MCP"
    description = "Download and place the assets into the run folder"

    dependsOn downloadAssets

    mkdir assetsFolder

    doLast {
        copy {
            from zipTree('cache/assets.zip')
            into assetsFolder
        }

        delete 'cache/assets.zip'
    }

}

tasks.register('startClient', JavaExec) {
    group = "PC-API"
    description = "Runs the client"
    classpath sourceSets.main.compileClasspath
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs '-XstartOnFirstThread'
    }

    var runFolder = file('run')

    workingDir runFolder
    args '--gameDir', '.'
    args '--version', minecraft_version
    args '--assetsDir', runFolder.relativePath(assetsFolder)
    args '--assetIndex', '5'
    args '--accessToken', '0'
    mainClass = 'net.minecraft.client.main.Main'
}

tasks.register('install', Copy) {
    group = "PC-API"
    dependsOn build
    println 'Copying addon to run archive'
    from jar.archiveFile
    into 'run/PixelCrasher/addons/'
}

tasks.register('debugClient') {
    group = "PC-API"
    dependsOn install
    dependsOn startClient
}

dependencies {
    implementation 'de.pixelcrasher:pixelcrasher:0.4.0-SNAPSHOT-B01'
    implementation 'de.pixelcrack3r.pixelcrasher:PixelCrasherAPI:0.4.0-SNAPSHOT-B01'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

}

test {
    useJUnitPlatform()
}